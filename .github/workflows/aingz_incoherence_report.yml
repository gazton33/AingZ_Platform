name: "AingZ · Incoherence Report V4"
on:
  workflow_dispatch: {}
permissions:
  contents: read
jobs:
  incoherences:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Ensure baseline (fallback)
        shell: bash
        run: |
          if [ ! -f ops/baseline.csv ] && [ ! -f baseline.csv ]; then
            echo "baseline.csv not found → running litw_sweep (read-only)"
            python ops/scripts/litw_sweep.py || python3 ops/scripts/litw_sweep.py || true
          fi

      - name: Generate Incoherence Report (read-only)
        shell: bash
        run: |
          python - <<'PY'
          import csv, json, re, pathlib, datetime, os

          root = pathlib.Path('.')
          paths = [root/'ops'/'baseline.csv', root/'baseline.csv']
          rows = []
          for p in paths:
              if p.exists():
                  with p.open() as f:
                      reader = csv.DictReader(f)
                      rows.extend(list(reader))

          chk = {
            'missing_front_matter': 0,
            'missing_outputtemplate': 0,
            'missing_xrf': 0,
            'no_triggers': 0,
            'bad_code_or_route': 0,
          }

          for r in rows:
              path = r.get('path') or r.get('file') or ''
              if path.endswith('.md') and os.path.exists(path):
                  with open(path, 'r', encoding='utf-8', errors='ignore') as fh:
                      content = fh.read()
                  if not content.strip().startswith('---'):
                      chk['missing_front_matter'] += 1
                  if '\n# OutputTemplate' not in content:
                      chk['missing_outputtemplate'] += 1
                  if 'glossary:' not in content or 'dictionary:' not in content:
                      chk['missing_xrf'] += 1
                  if 'triggers:' not in content:
                      chk['no_triggers'] += 1
                  if re.search(r'^code:\s*[A-Z]{1,5}\b', content, re.M) is None:
                      chk['bad_code_or_route'] += 1

          report = {
            'created_at': datetime.datetime.utcnow().isoformat()+"Z",
            'totals': {k:int(v) for k,v in chk.items()},
          }

          outdir = root/'ops'/'log'
          outdir.mkdir(parents=True, exist_ok=True)
          with open(outdir/'diagnosis_baseline.md', 'w', encoding='utf-8') as out:
              out.write('# Diagnosis Baseline (auto, read-only)\n\n')
              out.write(json.dumps(report, indent=2, ensure_ascii=False))

          print('ok')
          PY

      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: incoherence_report
          path: ops/log/diagnosis_baseline.md
